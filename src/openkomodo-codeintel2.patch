--- openkomodo/src/codeintel/lib/codeintel2/database/database.py
+++ openkomodo/src/codeintel/lib/codeintel2/database/database.py
@@ -445,15 +445,19 @@ class Database(object):
         self.acquire_lock()
         try:
             log.debug("fs-write: create db skeleton in '%s'", self.base_dir)
-            os.makedirs(self.base_dir)
+            if not exists(self.base_dir):
+                os.makedirs(self.base_dir)
             open(join(self.base_dir, "README.txt"), 'w').write(dedent("""
                 This is a database for the Code Intelligence system (a
-                subsystem of Komodo). Do NOT modify anything in here unless
-                you know what you are doing.
+                subsystem of SublimeCodeIntel). Do NOT modify anything in here
+                unless you know what you are doing.
 
-                See http://www.activestate.com/Products/Komodo/ for details.
+                See http://github.com/Kronuz/SublimeCodeIntel for details.
             """))
             open(join(self.base_dir, "VERSION"), 'w').write(self.VERSION)
+            config_file = join(self.base_dir, "config")
+            if not exists(config_file):
+                open(config_file, 'w').write("{}")
             os.mkdir(join(self.base_dir, "db"))
         finally:
             self.release_lock()
--- openkomodo/src/codeintel/lib/codeintel2/accessor.py
+++ openkomodo/src/codeintel/lib/codeintel2/accessor.py
     def _token_at_pos(self, pos):
         #XXX Locality of reference should offer an optimization here.
         # Binary search for appropriate token.
-        lower, upper = 0, len(self.tokens)  # [lower-limit, upper-limit)
+        lower, upper = 0, len(self.tokens) - 1  # [lower-limit, upper-limit)
         sentinel = 15
         while sentinel > 0:
             idx = ((upper - lower) / 2) + lower
             token = self.tokens[idx]
-            #print "_token_at_pos %d: token idx=%d text[%d:%d]=%r"\
+            # print "_token_at_pos %d: token idx=%d text[%d:%d]=%r"\
             #      % (pos, idx, token["start_index"], token["end_index"],
             #         token["text"])
-            start, end = token["start_index"], token["end_index"]
-            if pos < token["start_index"]:
+            # start, end = token["start_index"], token["end_index"]
+            if lower == upper:
+                return token
+            elif pos < token["start_index"]:
                 upper = idx
             elif pos > token["end_index"]:
                 lower = idx + 1
--- openkomodo/src/codeintel/lib/codeintel2/lang_python.py
+++ openkomodo/src/codeintel/lib/codeintel2/lang_python.py
@@ -539,7 +539,7 @@ class PythonLangIntel(CitadelLangIntel, ParenStyleCalltipIntelMixin,
             paths_from_libname = {"sitelib": [], "envlib": [], "stdlib": []}
             canon_sitelibdir = sitelibdir and normcase(sitelibdir) or None
             canon_prefix = prefix and normcase(prefix) or None
-            canon_libdir = normcase(libdir)
+            canon_libdir = libdir and normcase(libdir) or ""
             canon_libdir_plat_prefix = normcase(join(libdir, "plat-"))
             canon_libdir_lib_prefix = normcase(join(libdir, "lib-"))
             for dir in sys_path:
