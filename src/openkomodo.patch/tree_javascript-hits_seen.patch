--- openkomodo/src/codeintel/lib/codeintel2/tree_javascript.py
+++ openkomodo/src/codeintel/lib/codeintel2/tree_javascript.py
@@ -93,6 +93,10 @@ class CandidatesForTreeEvaluator(TreeEvaluator):
         return '.'.join(tokens).replace('.()', '()')
 
 class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
+    def __init__(self, *args, **kwargs):
+        super(JavaScriptTreeEvaluator, self).__init__(*args, **kwargs)
+        self._hits_seen = {}
+
     def eval_cplns(self):
         self.log_start()
         start_scoperef = self.get_start_scoperef()
@@ -390,6 +394,13 @@ class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
         return calltips
 
     def _hits_from_citdl(self, expr, scoperef, defn_only=False):
+
+        _k_ = ('citdl', expr, scoperef[0], tuple(scoperef[1]), defn_only)
+        if _k_ in self._hits_seen:
+            self.debug('%r %s', _k_, '*'*88)
+            return []
+        self._hits_seen[_k_] = True
+
         self._check_infinite_recursion(expr)
 
         if "[" in expr:
@@ -463,6 +474,13 @@ class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
         """
         assert elem.get("ilk") == "argument", \
            "_hits_from_argument expects an argument, got a %r" % elem.get("ilk")
+
+        _k_ = ('argument', elem, scoperef[0], tuple(scoperef[1]))
+        if _k_ in self._hits_seen:
+            self.debug('%r %s', _k_, '*'*88)
+            return []
+        self._hits_seen[_k_] = True
+
         hits = []
         scope = self._elem_from_scoperef(scoperef) # the function the argument is in
 
@@ -509,6 +527,13 @@ class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
 
     def _hits_from_call(self, elem, scoperef):
         """Resolve the function call inference for 'elem' at 'scoperef'."""
+
+        _k_ = ('call', elem, scoperef[0], tuple(scoperef[1]))
+        if _k_ in self._hits_seen:
+            self.debug('%r %s', _k_, '*'*88)
+            return []
+        self._hits_seen[_k_] = True
+
         if elem.tag == "variable":
             hits = []
             var_hits = self._hits_from_variable_type_inference(elem, scoperef)
@@ -636,6 +661,13 @@ class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
     def _hits_from_variable_type_inference(self, elem, scoperef):
         """Resolve the type inference for 'elem' at 'scoperef'."""
         assert elem.tag == "variable"
+
+        _k_ = ('variable_type_inference', elem, scoperef[0], tuple(scoperef[1]))
+        if _k_ in self._hits_seen:
+            self.debug('%r %s', _k_, '*'*88)
+            return []
+        self._hits_seen[_k_] = True
+
         if len(elem) != 0:
             # This is CIX for a JavaScript custom Object instance: a
             # common pattern in JS. See test javascript/cpln/local2.
@@ -700,6 +732,13 @@ class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
         other files in the execution set. Get that down to a list of
         hits and a remaining list of expression tokens.
         """
+
+        _k_ = ('first_part', tokens, scoperef[0], tuple(scoperef[1]))
+        if _k_ in self._hits_seen:
+            self.debug('%r %s', _k_, '*'*88)
+            return []
+        self._hits_seen[_k_] = True
+
         elem, scoperef = self._hit_from_first_token(tokens[0], scoperef)
         if elem is not None:
             self.log("_hit_from_first_part: found elem: %s %r at %r",
@@ -791,6 +830,13 @@ class JavaScriptTreeEvaluator(CandidatesForTreeEvaluator):
         # ".node" are possible.
         #
         # TODO: Get these from node using "require.extensions".
+
+        _k_ = ('commonjs_require', requirename, scoperef[0], tuple(scoperef[1]))
+        if _k_ in self._hits_seen:
+            self.debug('%r %s', _k_, '*'*88)
+            return []
+        self._hits_seen[_k_] = True
+
         requirename += ".js"
         from codeintel2.database.langlib import LangDirsLib
         from codeintel2.database.multilanglib import MultiLangDirsLib
